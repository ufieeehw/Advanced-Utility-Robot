#!/usr/bin/python
from __future__ import division # Make all division floating point division

# Misc
import os
import argparse
import struct
## Math
import numpy as np

# Ros
import rospy
import tf.transformations as tf_trans

# Ros packages
import roslib; roslib.load_manifest('ieee2015_xmega_driver')
import xmega_driver

# Ros Msgs
from std_msgs.msg import Header, Float64, String, Int16
from geometry_msgs.msg import Point, PointStamped, PoseStamped, Pose, Quaternion, Vector3
from ieee2015_xmega_driver.msg import XMega_Message
from milaur_controller.msg import Wheel_Velocity, Decoder_Data
from milaur_navigation.msg import Sonar_Data


class Xmega_Driver(object):
    def __init__(self, types_path, msg_sub_topic='robot/send_xmega_msg'):
        '''Xmega driver -- handles the serial interface with the Xmega128A1U for the IEEE 2015 robot.
        XMega Sensor Manifest:
            - IMU (9DOF) - 12 bytes (only using 6 DOF) [An IMU is an intertial measurement unit]
            - Light Sensor
            - 4x: Encoders/Odometry
            - 1-2x: Solenoid State (XMega will hold this internally)
            - 1-2x: On/Kill Switches
            - 1-2x: Battery Monitors

        XMega Actuator Manifest:
            - 4x: Wheel Motors (Set Motor Velocities)
            - Unk: Non-Wheel control motors (Set torque)
            - 4-5x: Servos (Arm and a few places, set angle)
            - 4x: Status LED's (Toggle)
            - 1-2x: Solenoids (Go, no-go!)

        TODO:
            - Add better threading locks (ones that don't cause message loss)
            - Make the RECEIVING ros messages part make more sense
            -- I think this will mean instantiating specific subscribers in here and then using
               a more advanced thread-lock and queuing interface to deal with those threaded ros callbacks
            --- Forrest's TXROS is not out of the question
            - Do something crazy with hotplug rules to make the serial proxy always run

            - Raise an exception if somebody tries to send a message with inappropriate length

        ROS Package Deployment:
            In the distant future, it may be worth turning this into a pure ROS interface
            - Set up a YAML file that configures a whole bunch of ROS topics that directly subscribe to the xmega
            - Set up a YAML file that configures the message type to hex code magic.
        '''

        # ROS Setup
        rospy.init_node('XMega_Connector')
        self.serial_proxy = xmega_driver.Serial_Proxy(
            #port='/dev/xmega_tty',
            port='/dev/ttyUSB0',
            baud_rate=256000, 
        )

        # Add ROS elements
        self.decoder_data_pub = rospy.Publisher('/milaur/decoder', Decoder_Data, queue_size=1)
        self.sonar_data_pub = rospy.Publisher('/milaur/sonar', Sonar_Data, queue_size=1)
        self.state_pub = rospy.Publisher('milaur/state', Int16, queue_size=1)

        # Messages being sent from ROS to the XMega
        # To add a ROS->XMega message, you must...
        # Potentially add binding for ros-sending functions as well.
        self.debug_subscriber = rospy.Subscriber('robot/debug', String, self.got_ros_debug)
        self.wheel_velocity_subscriber = rospy.Subscriber("/milaur/wheel_velocity", Wheel_Velocity, self.got_wheel_velocity)


        # Bind types file to serial proxy
        # Bind types.h info for the serial proxy
        self.serial_proxy.bind_types(types_path)

        # Bind callbacks for messages FROM the Xmega
        self.serial_proxy.bind_callback('vector_error', self.got_xmega_error)
        self.serial_proxy.bind_callback('message_error', self.got_xmega_error)
        self.serial_proxy.bind_callback('buffer_error', self.got_xmega_error)
        self.serial_proxy.bind_callback('sonar_data', self.got_sonar_data)
        self.serial_proxy.bind_callback('decoder_data', self.got_decoder_data)

        # Start message
        self.send_start_msg()

        # Start TowBot
        self.state_pub.publish(Int16(1))

        # Relinquish control of the program - this is an infinite loop
        self.serial_proxy.run_serial_loop()

########## NOTHING WILL BE EXECUTED AFTER THIS LINE EXCEPT PREVIOUSLY BOUND CALLBACK FUNCTIONS ###############

    def send_start_msg(self):
        self.serial_proxy.add_message('start')

    def got_ros_debug(self, msg):
        string = msg.data
        for char in string:
            self.serial_proxy.add_message('ros_debug', char)

    def got_wheel_velocity(self, msg):
        left_wheel_char = chr(int(msg.left_wheel))
        right_wheel_char = chr(int(msg.right_wheel))
        message_data = left_wheel_char + right_wheel_char
        self.serial_proxy.add_message('motor', message_data)

    def got_xmega_error(self, msg_data):
        print("Got error,", msg_data)

    def got_test(self, msg_data):
        print "Recieved test!"
        if msg_data is not None:
            print "Data:", msg_data

    def got_sonar_data(self, msg_data):
        '''
        Converts sonar ADC values to cm.
        The conversion is as follows:
            Vin = RES * ((VREF * VDIV)/TOP)

            VREF is defined at 3.3V/1.6V = 2.0625V
            VDIV = (47 + 33)/33 = 2.424242
            TOP = 2^12/2 = 2047
            Vin = RES * 0.002443

            The sonar measures ~4.9mV/cm = 0.0049V/cm
            Distance(cm) = Vin / 0.0049 V/cm
            Distance(cm) = RES * (0.002443/0.0049)cm
            Distance(cm) = RES * 0.49849

        The first BYTE recieved is the lower BYTE of the 16 bit ADC value.
         We get the value of the ADC by sifting the second BYTE left 8 times
         then adding the two values together. To convert that value to cm, we
         multiply it by 0.49849.
        '''

        ''' Leftover from 6 BYTE messages
        msg = Sonar_Data(
            left_sonar = ((ord(msg_data[1])<<8) + ord(msg_data[0])) * 0.49849,
            middle_sonar = ((ord(msg_data[3])<<8) + ord(msg_data[2])) * 0.49849,
            right_sonar = ((ord(msg_data[5])<<8) + ord(msg_data[4])) * 0.49849
        )
        '''

        # Testing at 8 bit res w/ 4 byte msgs
        msg = Sonar_Data(
            left_sonar = ord(msg_data[0]) * 8.03471,
            middle_sonar = ord(msg_data[1]) * 8.03471,
            right_sonar = ord(msg_data[2]) * 8.03471
        )
        self.sonar_data_pub.publish(msg)

    def got_decoder_data(self, msg_data):
        '''
        TODO: Put userful information here
        data is published in radians per second
        '''
        msg = Decoder_Data(
            left_wheel = (((struct.unpack(">h", msg_data[1] + msg_data[0])[0])) * 0.0174532925),
            right_wheel = (((struct.unpack(">h", msg_data[3] + msg_data[2])[0])) * 0.0174532925)
        )

        self.decoder_data_pub.publish(msg)

if __name__ == '__main__':
    usage_msg = "Serial interface with the XMega128A1U for the IEEE2015 team"
    desc_msg = "Specify a types_path that points to types.h in the xmega folder to handle types parsing"
    parser = argparse.ArgumentParser(usage=usage_msg, description=desc_msg)
    parser.add_argument('--types_path', dest='types_path',
                      help='Designate the absolute location of the types.h file')

    args = parser.parse_args(rospy.myargv()[1:])
    types_path = args.types_path
    print 'types path:', types_path
    driver = Xmega_Driver(types_path)
    rospy.spin()
